/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package KataLightSaberLeague

import kotlin.test.Test
import kotlin.test.assertNotNull

class AppTest {
    @Test fun testAppHasAGreeting() {
        val classUnderTest = App()
        assertNotNull(classUnderTest.greeting, "app should have a greeting")
    }

    @Test(expected = NoBestPlayersFoundException::class)
    fun `get 3 best players throw no best player found`() {
        val clan = Clan("Helico", listOf())

        clan.get3BestPlayers()
    }

    @Test
    fun `get 3 best players return minimum 1 player`() {
        val clan = Clan("Helico", listOf(Player("Robin", 0)))

        assert(clan.get3BestPlayers().isNotEmpty())
    }

    @Test
    fun `get 3 best players return maximum 3 players`() {
        val clan = Clan(
            "Helico", listOf(
                Player("Robin", 0), Player("Erika", 0),
                Player("Christelle", 0), Player("Robin n2", 0)
            )
        )

        assert(clan.get3BestPlayers().size < 4)
    }

    @Test
    fun `get 3 best players return 3 differents players`() {
        val player = Player("Robin", 0)
        val players = listOf(
            player, player,
            player, Player("Robin", 0)
        )
        val clan = Clan(
            "Helico", players
        )

        assert(clan.get3BestPlayers().size == 2)
    }

    @Test
    fun `get 3 best players after a fight the winner should be above looser`() {
        val winner = Player("Erika", 0)
        val clan = Clan(
            "Helico", listOf(
                Player("Robin", 0), Player("Christelle", 0),
                winner, Player("Le Fantome", 0)
            )
        )

        assert(clan.get3BestPlayers()[0] == winner)
    }
}

class NoBestPlayersFoundException : Exception()

class Player(val name: String, var experience: Int)

class Clan(val name: String, players: List<Player>) {

    private val players: MutableList<Player> = players.distinct().toMutableList()

    @Throws(NoBestPlayersFoundException::class)
    fun get3BestPlayers(): List<Player> {
        if (players.isEmpty()) {
            throw NoBestPlayersFoundException()
        }

        return if (players.size > 3) {
            players.subList(0, 3)
        } else {
            players
        }
    }

    fun registerFightScore(winner: Player, looser: Player) {

    }
}

interface Fight {
    fun fight(player1: Player, player2: Player): Player?
}
